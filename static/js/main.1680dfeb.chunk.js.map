{"version":3,"sources":["constants/enums.js","components/Pomodoro.js","components/Footer.js","buttons/PauseButton.js","buttons/CallbackButton.js","components/Header.js","components/App.js","reportWebVitals.js","index.js"],"names":["APP_STATUS","SESSION_TYPE","Pomodoro","timerValues","callback","useState","minutes","sessionTimer","seconds","clockTime","setClockTime","Date","now","lastUpdate","setLastUpdate","useEffect","appStatus","delay","nextUpdate","setTimeout","newSessionType","sessionType","clearTimeout","localMinutes","breakTimer","timerMinutesText","timerSecondsText","className","Footer","PauseButton","previousState","setPreviousState","onClick","CallbackButton","name","value","Header","breakTimerInput","useRef","sessionTimerInput","refreshApp","breakTimerNewValue","current","sessionTimerNewValue","validateTimer","event","input","target","replace","ref","type","pattern","onInput","App","appTimer","setAppTimer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1680dfeb.chunk.js","sourcesContent":["export const APP_STATUS = {\r\n    RUNNING: \"running\",\r\n    PAUSED: \"paused\",\r\n    REFRESH: \"refresh\"\r\n}\r\n\r\nexport const SESSION_TYPE = {\r\n    BREAK: \"break\",\r\n    ACTIVE: \"active\"\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { APP_STATUS, SESSION_TYPE} from '../constants/enums';\r\n\r\nexport default function Pomodoro({ timerValues, callback }) {\r\n    const [clockTime, setClockTime] = useState({ minutes: timerValues.sessionTimer, seconds: 0 });\r\n    const [lastUpdate, setLastUpdate] = useState(Date.now());\r\n\r\n    useEffect(() => {\r\n        if (timerValues.appStatus !== APP_STATUS.PAUSED) {\r\n            var delay = 1000 - (Date.now() - lastUpdate) % 1000;\r\n            let nextUpdate = setTimeout(() => {\r\n                setLastUpdate(() => Date.now())\r\n                if (clockTime.seconds === 0) {\r\n                    if (clockTime.minutes !== 0) {\r\n                        setClockTime(() => ({ minutes: clockTime.minutes - 1, seconds: 59 }));\r\n                    } else {\r\n                        var newSessionType = timerValues.sessionType === SESSION_TYPE.BREAK ? SESSION_TYPE.ACTIVE : SESSION_TYPE.BREAK;\r\n                        callback(() => ({ ...timerValues, sessionType: newSessionType, appStatus: APP_STATUS.REFRESH}));\r\n                    }\r\n                } else {\r\n                    setClockTime(() => ({ ...clockTime, seconds: clockTime.seconds - 1 }));\r\n                }\r\n            }, delay)\r\n            return () => clearTimeout(nextUpdate);\r\n        }\r\n    }); \r\n\r\n    useEffect(() => {\r\n        if(timerValues.appStatus !== APP_STATUS.REFRESH) return;\r\n        setLastUpdate(() => Date.now());\r\n        var localMinutes = timerValues.sessionType === SESSION_TYPE.BREAK ? timerValues.breakTimer : timerValues.sessionTimer;\r\n        var localSeconds = 0;\r\n        setClockTime(() => ({ minutes: localMinutes, seconds: localSeconds }));\r\n        callback(() => ({...timerValues, appStatus: APP_STATUS.RUNNING}))\r\n    }, [timerValues, callback]) \r\n\r\n    const timerMinutesText = (clockTime.minutes) < 10 ? `0${clockTime.minutes}` : clockTime.minutes;\r\n    const timerSecondsText = (clockTime.seconds) < 10 ? `0${clockTime.seconds}` : clockTime.seconds;\r\n\r\n    return (\r\n        <div className=\"pomodoro\">\r\n            <div className=\"message\">\r\n                {timerValues.sessionType === SESSION_TYPE.BREAK && <div>Break time! New session starts in</div>}\r\n                {timerValues.sessionType === SESSION_TYPE.ACTIVE && <div>Current session time left:</div>}\r\n            </div>\r\n            <div className=\"timer\">{timerMinutesText}:{timerSecondsText}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Footer() {\r\n\r\n    return <div className=\"footer\">Made by Densau using React</div>\r\n}","import React, { useState } from 'react';\r\nimport { APP_STATUS } from '../constants/enums';\r\n\r\nexport default function PauseButton({ timerValues, callback }) {\r\n    const[previousState, setPreviousState] = useState(timerValues.appStatus);\r\n\r\n    const pauseApp = (event) => {\r\n        if(timerValues.appStatus === APP_STATUS.PAUSED){\r\n            callback(() => ({...timerValues, appStatus: previousState}));\r\n        } else{\r\n            setPreviousState(timerValues.appStatus)\r\n            callback(() => ({...timerValues, appStatus: APP_STATUS.PAUSED}));\r\n        }\r\n    }\r\n\r\n    return <button onClick={() => pauseApp()}>{timerValues.appStatus !== APP_STATUS.PAUSED && <span>Pause</span>} {timerValues.appStatus === APP_STATUS.PAUSED && <span>Unpause</span>}</button>\r\n}\r\n","import React from 'react';\r\n\r\nexport default function CallbackButton({ name, value, callback }) {\r\n\r\n    const invokeCallback = () => {\r\n        callback(value);\r\n    }\r\n\r\n    return <button onClick={invokeCallback}>{name}</button>;\r\n}","import React, { useRef } from 'react';\r\nimport PauseButton from '../buttons/PauseButton';\r\nimport CallbackButton from '../buttons/CallbackButton';\r\nimport { APP_STATUS, SESSION_TYPE } from '../constants/enums';\r\n\r\nexport default function Header({ timerValues, callback }) {\r\n    const breakTimerInput = useRef(null);\r\n    const sessionTimerInput = useRef(null);\r\n\r\n    const refreshApp = (newSessionType) => {\r\n        var breakTimerNewValue = breakTimerInput.current.value === '' ? timerValues.breakTimer : breakTimerInput.current.value;\r\n        var sessionTimerNewValue = sessionTimerInput.current.value === '' ? timerValues.sessionTimer : sessionTimerInput.current.value;\r\n        callback(() => ({ ...timerValues, appStatus: APP_STATUS.REFRESH, sessionType: newSessionType, sessionTimer: sessionTimerNewValue, breakTimer: breakTimerNewValue }));\r\n    }\r\n\r\n    const validateTimer = (event, sessionType) => {\r\n        var input = event.target.value;\r\n        input = input.replace(/[^\\d]+/g, '');\r\n        if (+input > 0) {\r\n            event.target.value = input;\r\n        } else {\r\n            event.target.value = '';\r\n        }\r\n    }\r\n\r\n    return <div className=\"header\">\r\n        <span>Session minutes</span><input ref={sessionTimerInput} type=\"number\" pattern=\"[0-9]\" name=\"sessionTimer\" onInput={validateTimer} />\r\n        <span>Break minutes</span><input ref={breakTimerInput} type=\"number\" pattern=\"[0-9]\" name=\"breakTimer\" onInput={validateTimer} />\r\n        <CallbackButton name={\"Start new\"} value={SESSION_TYPE.ACTIVE} callback={refreshApp}/>\r\n        <CallbackButton name={\"Start break\"} value={SESSION_TYPE.BREAK} callback={refreshApp}/>\r\n        <PauseButton timerValues={timerValues} callback={callback}/>\r\n    </div>;\r\n}","import './../App.css';\nimport Pomodoro from './Pomodoro';\nimport Footer from \"./Footer\"\nimport Header from \"./Header\"\nimport React, {useState} from 'react'\nimport { APP_STATUS, SESSION_TYPE} from '../constants/enums';\n\nfunction App() {\n  const [appTimer, setAppTimer] = useState({breakTimer: 1, sessionTimer: 1, sessionType: SESSION_TYPE.ACTIVE, appStatus: APP_STATUS.RUNNING});\n\n  return (\n    <div className=\"App\">\n      <Header timerValues={appTimer} callback={setAppTimer}/>\n      <Pomodoro timerValues={appTimer} callback={setAppTimer} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}